// <auto-generated />
using System;
using MarketPlace;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MarketPlace.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MarketPlace.Models.Category", b =>
                {
                    b.Property<int>("IdCategory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCategory"));

                    b.Property<int>("Description")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdCategory");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("MarketPlace.Models.Image", b =>
                {
                    b.Property<int>("IdImage")
                        .HasColumnType("int");

                    b.Property<string>("Bucket")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserIdUser")
                        .HasColumnType("int");

                    b.HasKey("IdImage");

                    b.HasIndex("UserIdUser");

                    b.ToTable("Image", (string)null);
                });

            modelBuilder.Entity("MarketPlace.Models.Product", b =>
                {
                    b.Property<int>("IdProduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProduct"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("IdCategory")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<double>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.HasKey("IdProduct");

                    b.HasIndex("IdCategory");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("MarketPlace.Models.Profile", b =>
                {
                    b.Property<int>("IdProfile")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProfile"));

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("IdentityType")
                        .HasColumnType("int");

                    b.Property<string>("LastNames")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("Names")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.HasKey("IdProfile");

                    b.ToTable("Profile", (string)null);
                });

            modelBuilder.Entity("MarketPlace.Models.Sale", b =>
                {
                    b.Property<int>("IdSale")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSale"));

                    b.Property<double>("IGV")
                        .HasColumnType("float");

                    b.Property<int>("IdShoppingCart")
                        .HasColumnType("int");

                    b.Property<double>("SaleAmount")
                        .HasColumnType("float");

                    b.HasKey("IdSale");

                    b.HasIndex("IdShoppingCart")
                        .IsUnique();

                    b.ToTable("Sale", (string)null);
                });

            modelBuilder.Entity("MarketPlace.Models.ShoppingCartDetail", b =>
                {
                    b.Property<int>("IdShoppingCartDetail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdShoppingCartDetail"));

                    b.Property<int>("IdProduct")
                        .HasColumnType("int");

                    b.Property<int>("IdShoppingCart")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("IdShoppingCartDetail");

                    b.HasIndex("IdProduct");

                    b.HasIndex("IdShoppingCart");

                    b.ToTable("ShoppingCartDetail", (string)null);
                });

            modelBuilder.Entity("MarketPlace.Models.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUser"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdProfile")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdUser");

                    b.HasIndex("IdProfile")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("MarketPlace.ShoppingCart", b =>
                {
                    b.Property<int>("IdShoppingCart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdShoppingCart"));

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<int>("UserIdUser")
                        .HasColumnType("int");

                    b.HasKey("IdShoppingCart");

                    b.HasIndex("UserIdUser");

                    b.ToTable("ShoppingCart", (string)null);
                });

            modelBuilder.Entity("MarketPlace.Models.Image", b =>
                {
                    b.HasOne("MarketPlace.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("IdImage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarketPlace.Models.User", null)
                        .WithMany("Images")
                        .HasForeignKey("UserIdUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MarketPlace.Models.Product", b =>
                {
                    b.HasOne("MarketPlace.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("IdCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("MarketPlace.Models.Sale", b =>
                {
                    b.HasOne("MarketPlace.ShoppingCart", "ShoppingCart")
                        .WithOne("Sale")
                        .HasForeignKey("MarketPlace.Models.Sale", "IdShoppingCart")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("MarketPlace.Models.ShoppingCartDetail", b =>
                {
                    b.HasOne("MarketPlace.Models.Product", "Product")
                        .WithMany("ShoppingCartDetails")
                        .HasForeignKey("IdProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarketPlace.ShoppingCart", "ShoppingCart")
                        .WithMany("ShoppingCartDetails")
                        .HasForeignKey("IdShoppingCart")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("MarketPlace.Models.User", b =>
                {
                    b.HasOne("MarketPlace.Models.Profile", "Profile")
                        .WithOne("User")
                        .HasForeignKey("MarketPlace.Models.User", "IdProfile")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("MarketPlace.ShoppingCart", b =>
                {
                    b.HasOne("MarketPlace.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserIdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MarketPlace.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MarketPlace.Models.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("ShoppingCartDetails");
                });

            modelBuilder.Entity("MarketPlace.Models.Profile", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("MarketPlace.Models.User", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("MarketPlace.ShoppingCart", b =>
                {
                    b.Navigation("Sale")
                        .IsRequired();

                    b.Navigation("ShoppingCartDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
